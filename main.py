import disnake
from disnake.ext import commands, tasks
import aiohttp
from datetime import datetime
import os

bot = commands.Bot(command_prefix="/", intents=disnake.Intents.all())

async def fetch_exploit_status():
    async with aiohttp.ClientSession() as session:
        async with session.get('https://api.whatexploitsare.online/status') as response:
            data = await response.json()
    return data

def create_embed(data):
    embed = disnake.Embed(title="Exploit Status", color=0x303134)
    embed.set_author(name="Exploit Checker", icon_url="https://cdn.discordapp.com/icons/920129627345809418/bd87703cccaa0273d376931a5443ffc5.webp")
    embed.set_footer(text="Made by vemorr#6666 ✦ Updates every 20 seconds")
    embed.set_image(url="https://cdn.discordapp.com/banners/920129627345809418/b4e3e1f80067e84911fcf9fb80385267.jpg?size=2048")

    for item in data:
        for name in item:
            if name == 'ROBLOX':
                embed.description = f"**ROBLOX**\n✦ Version: {item['ROBLOX']['version']}\n✦ Last Update: <t:{item['ROBLOX']['last_update_unix']}>"
            else:
                if name == 'Script-Ware':
                    display_name = f"Script-Ware Windows"
                elif name == 'Synapse':
                    display_name = "Synapse X"
                else:
                    display_name = f"{name}"

                if item[name]['download_url'] == '':
                    download_url = item[name]['v3rmillion_url']
                else:
                    download_url = item[name]['download_url']

                if item[name]['is_free'] == False:
                    download_url_text = 'Purchase'
                else:
                    download_url_text = 'Download'

                if item[name]['discord_url'] == item[name]['website-url']:
                    discord_url = 'https://tinyurl.com/synapse-invite'
                else:
                    discord_url = item[name]['discord_url']

                embed.add_field(name=display_name, value=f"✦ Updated: {item[name]['updated']}\n✦ Version: {item[name]['exploit_version']}\n✦ Free: {item[name]['is_free']}\n✦ UNC: {item[name]['unc']}\n✦ Type: {item[name]['type']}\n✦ Last Update: <t:{item[name]['last_update_unix']}>\n\n**[Discord]({discord_url})**\n\n**[{download_url_text}]({download_url})**", inline=True)

    return embed

@bot.event
async def on_ready():
    check_status.start()
    print("Ready")

@tasks.loop(seconds=20)
async def check_status():
    data = await fetch_exploit_status()
    embed = create_embed(data)
    chanid = os.environ["CHANNELID"]

    channel = bot.get_channel(int(chanid))
    messages = await channel.history(limit=1).flatten()

    if messages and messages[0].author.id == bot.user.id:
        await messages[0].edit(embed=embed)
    else:
        await channel.purge(limit=500)
        await channel.send(embed=embed)

bot.run(os.environ["TOKEN"])
